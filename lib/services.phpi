<?php
/*
   Copyright (C) 2012 Giannis Kosmas <kosmasgiannis@gmail.com>

   This file is part of MARCeditor.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   A copy of the GNU General Public License is also available at
   <URL:http://www.gnu.org/copyleft/gpl.html>.  You may also obtain
   it by writing to the Free Software Foundation, Inc., 59 Temple
   Place - Suite 330, Boston, MA 02111-1307, USA.
*/

require_once (dirname(__FILE__) . "/z3950.phpi");

function z3950search_cmd() {
    global $the_request;
    $xml = '';
    $q = stripslashes(trim($the_request['q']));
    $start = trim($the_request['start']);
    $number = trim($the_request['number']);
    $targets = trim($the_request['targets'],',');
    $tarr = explode(',', $targets);
    $path = $the_request['path'];
    $complete_path = $path."/targets.tkl";
    $ts = array();
    if ( is_file($complete_path) && is_readable($complete_path)) {
        $ts = loadtargets($complete_path);
    }

//FIXME : start and number must be integers
  if ($q == '') {
      $xml = "<status>error</status><message>Query is empty</message>";
  } else if (count($ts) == 0) {
      $xml = "<status>error</status><message>No targets found</message>";
  } else if ($targets == '') {
      $xml = "<status>error</status><message>No targets selected</message>";
  } else {
    $selected_targets = selectTargetsByIds($ts, $tarr);
    if (count($selected_targets) == 0) {
        $xml = "<status>error</status><message>No targets selected</message>";
    } else {
        $results = z3950_search_multi($selected_targets, $q, 'ccl', $start, $number);
        $xml .= "<summary hits=\"".$results['totalhits']."\" start=\"".$start."\" number=\"".$number."\"/>";
        foreach($results['pertarget'] as $t) {
            $xml .= "<target id=\"".$t['id']."\" name=\"".$t['name']."\" hits=\"".$t['hits']."\">";

            $xml .= "<results>";
            if (isset($t['records'])) {
                foreach($t['records'] as $r) {
                    $xml .= "<result offset=\"".$r['offset']."\">";
                    $xml .= "<raw>";
                    $xml .= $r['raw'];
                    $xml .= "</raw>";
                    $xml .= "<display>";
                    $xml .= $r['display'];
                    $xml .= "</display>";
                    $xml .= "</result>";
                }
            }
            $xml .= "</results>";
            $xml .= "<error>";
            $xml .= $t['error'];
            $xml .= "</error>";

            $xml .= "</target>";
        }
        $xml = "<status>ok</status><z3950search>".$xml;
        $xml .= "</z3950search>";
    }
  }
  return $xml;
}

function selectTargetsByIds($targets, $ids) {
 $selected = array();
 foreach ($ids as $id) {
  if (isset($targets[$id])) {
    $selected[$id] = $targets[$id];
  }
 }
 return $selected;
}

function loadtargets_cmd() {
  global $the_request;
  $xml = '';
  $cnt = 0;
  $path = $the_request['path'];
  $complete_path = $path."/targets.tkl";
  //$xml .= "<d>$complete_path</d>";
  if ( is_file($complete_path) && is_readable($complete_path)) {
    $ts = loadtargets($complete_path);
    //$y = print_r($ts, TRUE);
    //$xml .= "<d>$y</d>";
    foreach ($ts as $t) {
      $y = print_r($t, TRUE);
      $xml .= "<target id=\"".$t['id']."\">".$t['name']."</target>";
      $cnt++;
    }
  }
  $xml = "<status>ok</status><targets cnt=\"$cnt\">".$xml;
  $xml .= "</targets>";
  return $xml;
}

function loadtargets($filename, $filter="*") {
  $mytargets = array();
  $configxml = new DOMDocument;
  $configxml->load($filename);
  $targetslist = $configxml->getElementsByTagName( "target" );
  if ($targetslist->length) {
    foreach ($targetslist as $n) {
      if ($n->hasChildNodes()) {
        $cn = $n->firstChild;
        $mytarget = array();
        $targetid = '';
        while ($cn != NULL) {
          if (($cn->nodeType == XML_ELEMENT_NODE)) {
            if (($filter == "*") || (strpos($filter,$cn->localName) !== FALSE)) {
              if ($cn->localName !== 'ccl_profile') {
                $mytarget[$cn->localName] = $cn->nodeValue;
                if ($cn->localName == 'id') {
                  $targetid = $cn->nodeValue;
                }
              } else {
                $cclcn = $cn->firstChild;
                $mytarget[$cn->localName] = array();
                while ($cclcn != NULL) {
                  if (($cclcn->nodeType == XML_ELEMENT_NODE)) {
                    $mytarget[$cn->localName][$cclcn->localName] = $cclcn->nodeValue;
                  }
                  $cclcn = $cclcn->nextSibling;
                }
              }
            }
          }
          $cn = $cn->nextSibling;
        }
        $mytargets[$targetid] = $mytarget;
      }
    }
  }
  return $mytargets;
}

function loadtemplate_cmd() {
  global $the_request;
  $path = $the_request['path'];
  $name = $the_request['name'];
  $xml = '';
  $cnt = 0;
  $complete_path = $path."/".$name;
  if ( is_file($complete_path) && is_readable($complete_path)) {
    $farr = file($complete_path, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    if ($farr) {
      foreach ($farr as $l) {
        if ($cnt > 1) {
          $xml .= "<line>$l</line>";
        }
        $cnt++;
      }
    }
  }
  $xml = "<status>ok</status><template name=\"$name\" lines=\"$cnt-2\">".$xml;
  $xml .= "</template>";
  return $xml;
}

function templatelist_cmd() {
  global $the_request;
  $path = $the_request['path'];
  $xml = '';
  $cnt = 0;
  $complete_path = $path;
  if ($dh = @opendir($complete_path)) {
    while (strlen($entry = readdir($dh))) {
      $complete_entry = $complete_path."/".$entry;
      if ( is_file($complete_entry) && is_readable($complete_entry)) {
        $farr = file($complete_entry, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
        if ($farr) {
          if (isset($farr[0]) && (substr($farr[0],0,21) == '@#MARCEDITOR-TEMPLATE')) {
            $title = (isset($farr[1]) && (strlen(trim($farr[1]))) && (substr(trim($farr[1]),0,1) !== '[')) ? trim($farr[1]) : preg_replace("/\.tmpl$/",'',$entry);
            if (preg_match('/\.tmpl$/',$entry)) {
             $xml .= '<template filename="'.$entry.'" title="'.$title.'">';
             $lcnt = 0;
             foreach ($farr as $l) {
               if ($lcnt > 1) {
                 $xml .= "<line>$l</line>";
               }
               $lcnt++;
             }
             $xml .= '</template>';
             $cnt++;
            }
          }
        }
      }
    }
  }
  $xml = "<status>ok</status><templates cnt=\"$cnt\">".$xml;
  $xml .= "</templates>";
  return $xml;
}

function validate_cmd() {
  global $the_request;
  $marcxml = $the_request['marcxml'];
  $recordtype = $the_request['recordtype'];
  $xml = new DOMDocument;
  $xml->loadXML($marcxml);

  // position 6  (starting from 0) in leader with value 'z' indicates authority record.

  $x = preg_match_all('/\<leader\>(.*)\<\/leader\>/',$marcxml,$foo);
  if (substr($foo[1][0],6,1) == 'z') {
    $validator = realpath(dirname( __FILE__ ) .  "/../xsl/marc21_auth_validate.xsl");
  } else {
    $validator = realpath(dirname( __FILE__ ) .  "/../xsl/marc21_bib_validate.xsl");
  }
  //echo $validator."\n";

  $xsl = new DOMDocument;
  if ($xsl->load($validator) === FALSE) {
    //logit("load xsl failed ". $validator );
    $out = '<?xml version="1.0" encoding="UTF-8"?><validationReport><error>Failed to load validate stylesheet</error></validationReport>';
  } else {
    $proc = new XSLTProcessor;
    $proc->registerPHPFunctions();
    $proc->importStyleSheet($xsl);
    $out = $proc->transformToXML($xml);
  }
  $xml2 = new DOMDocument;
  $xml2->loadXML($out);
  $xsl2 = new DOMDocument;
  if ($xsl2->load(realpath(dirname( __FILE__ ) .  "/../xsl/validate2human.xsl")) === FALSE) {
    //logit("load xsl2 failed ".  realpath(dirname( __FILE__ ) .  "/../xsl/validate2human.xsl"));
    $out2 = "Failed to load validate stylesheet";
  } else {
    $proc2 = new XSLTProcessor;
    $proc2->registerPHPFunctions();
    $proc2->importStyleSheet($xsl2);
    $out2 = $proc2->transformToXML($xml2);
  }
  preg_match_all("/(<validate2human>(.*?)<\/validate2human>)/s", $out2, $m, PREG_PATTERN_ORDER);

  if (isset($m[2][0])) {
    $out_arr = explode("\n", $m[2][0]);
    $out_arr = array_unique($out_arr);
  } else {
    $out_arr = array();
  }
  $res =  implode("\n",$out_arr);
  return "<status>ok</status><message>$res</message>";
}

function examine_mixed_greek_latin_words($text) {
  $mixed_words = array();
  preg_match_all("/([^[:punct:][:space:]]+)/",$text,$m);
  //print_r($m);
  mb_internal_encoding("UTF-8");
  $greek_letters = "αβγδεζηθικλμνξοπρστυφχψωάέήίόύώϊϋΐΰςΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩΆΈΉΊΌΎΏΪΫ";
  $numbers = "0123456789";
  foreach ($m[0] as $k => $v) {
   $greek = 0;
   $number = 0;
   $latin = 0;
   $mixed = 0;
   for ($i = 0; $i < mb_strlen($v); $i++) {
     $t =  mb_substr($v,$i,1);
     if (mb_strstr($greek_letters,$t, TRUE) !== FALSE) $greek = 1;
     else if (mb_strstr($numbers, $t,  TRUE) !== FALSE) $number = 1;
     else $latin=1;
     if (($greek == 1) && ($latin == 1 )) {
      $mixed = 1;
      break;
     }
   }
   if ($mixed == 1 ) $mixed_words[] = $v;
  }
  if (!isset($mixed_words[0])) return FALSE;
  else return $mixed_words;
}

function fix_cmd() {
  global $the_request;
  $marcxml = $the_request['marcxml'];
  $filter = realpath(dirname( __FILE__ ) .  "/../xsl/fix_marc21.xsl");
  return filter_marc21($marcxml, $filter);
}

function filter_marc21($marcxml, $filter) {
  $xml = new DOMDocument;
  $xml->loadXML($marcxml);

  $identity_filter = realpath(dirname( __FILE__ ) .  "/../xsl/identity.xsl");

  $res = $out = '';

  $xsl = new DOMDocument;
  if ($xsl->load($filter) === FALSE) {
    //logit("load xsl failed ". $filter );
  } else {
    $proc = new XSLTProcessor;
    $proc->registerPHPFunctions();
    $proc->importStyleSheet($xsl);
    $out = $proc->transformToXML($xml);
  }
  if ($out != '') {
    $xml2 = new DOMDocument;
    $xml2->loadXML($out);
    $xsl2 = new DOMDocument;
    if ($xsl2->load($identity_filter) === FALSE) {
      //logit("load xsl2 failed ".  $identity_filter);
    } else {
      $proc2 = new XSLTProcessor;
      $proc2->registerPHPFunctions();
      $proc2->importStyleSheet($xsl2);
      $res = $proc2->transformToXML($xml2);
    }
  }

  return $res;
}

function extract_items($marcxml) {
  $Ns = 'http://www.loc.gov/MARC21/slim';
  $xml = new DOMDocument;
  $xml->loadXML($marcxml);

  $xpath = new DOMXPath($xml);
  $xpath->registerNamespace('marc', $Ns);

  $iquery = "/marc:collection";
  $root_list = $xpath->query($iquery);
  $query = '';
  if (($root_list) && ($root_list->length)) {
    $query = "/*";
  }
  $query .= "/*/marc:datafield[@tag = '936']";

  $node_list = $xpath->query($query);

  if (( $node_list ) && ( $node_list->length )) {
    $items = array();
    foreach ($node_list as $n) {
      $item = array();
       foreach ($n->getElementsByTagName('subfield') as $s) {
            
            switch ( $s->getAttribute('code') ) {
              case 'a' : $item['branch'] = $s->nodeValue; break;
              case 'b' : $item['collection'] = $s->nodeValue; break;
              case 'c' : $item['cln'] = $s->nodeValue; break;
              case 'd' : $item['barcode'] = $s->nodeValue; break;
              default: break;
            }

        }
        $items[] = $item;
    }
    return $items;
  }
  return FALSE;
}

function type_of_material($marcxml) {
 $LCtom['BK'] = ',aa,ac,ad,am,ta,tc,td,tm,';
 $LCtom['CR'] = ',ab,ai,as,tb,ti,ts,';
 $LCtom['CF'] = ',ma,mb,mc,md,mi,mm,ms,';
 $LCtom['MP'] = ',ea,eb,ec,ed,ei,em,es,fa,fb,fc,fd,fi,fm,fs,';
 $LCtom['MU'] = ',ca,cb,cc,cd,ci,cm,cs,da,db,dc,dd,di,dm,ds,ia,ib,ic,id,ii,im,is,ja,jb,jc,jd,ji,jm,js,';
 $LCtom['VM'] = ',ga,gb,gc,gd,gi,gm,gs,ka,kb,kc,kd,ki,km,ks,oa,ob,oc,od,oi,om,os,ra,rb,rc,rd,ri,rm,rs,';
 $LCtom['MX'] = ',pa,pb,pc,pd,pi,pm,ps,';

 $x = preg_match_all('/\<leader\>(.*)\<\/leader\>/',$marcxml,$m);
 $ldr_6_7 = ",".substr($m[1][0],6,2).",";
 foreach ($LCtom as $tom => $v) {
  if (strstr($v, $ldr_6_7, true) !== FALSE)
    return $tom;
 }
 return FALSE;
}

function logit($lines) {
  
  $filename = '/tmp/marceditor.log';

  if ($filename != '-') $fileid = fopen("$filename", 'a+');
  else $fileid = -1000;

  $x = 0;
  if ($fileid > 0) {
    if (is_array($lines)) {
      foreach ($lines as $k => $v) {
        $d = date("Y-m-d-H:m:s");
        if ($k != "$x") $line = "$k = $v";
        else $line = $v;
        fwrite($fileid, "$d ".$_SERVER['REMOTE_ADDR']." $line\n");
        $x++;
      }
    } else {
      $d = date("Y-m-d-H:m:s");
      fwrite($fileid, "$d ".$_SERVER['REMOTE_ADDR']." $lines\n");
    }
    fclose($fileid);
  } elseif ($fileid == -1000) {
    if (is_array($lines)) {
      foreach ($lines as $k => $v) {
        $d = date("Y-m-d-H:m:s");
        if ($k != "$x") $line = "$k = $v";
        else $line = $v;
        echo "$d ".$_SERVER['REMOTE_ADDR']." $line\n";
        $x++;
      }
    } else {
      $d = date("Y-m-d-H:m:s");
      echo "$d ".$_SERVER['REMOTE_ADDR']." $lines\n";
    }
  }
}

?>
